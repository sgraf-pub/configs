---
  - name: run this on fedora type systems
    set_fact:
      var_home: 'home'
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'CentOS') or (ansible_distribution == 'openSUSE Leap')

  - name: run this on OSX type systems
    set_fact:
      var_home: 'Users'
    when: ansible_distribution == 'MacOSX'

  #
  # Check if var_user is valid
  #
  - name: Check if username is valid
    stat: path=/{{ var_home }}/{{ var_user }}
    register: st
  - name: Error if username is invalid
    fail: msg="Invalid username"
    when: st.stat.exists == False

  #
  # Setup htop
  #
  - name: Create htoprc dir
    file: path=/{{ var_home }}/{{ var_user }}/.config/htop state=directory
    become: true
    become_user: "{{ var_user }}"
  - name: Copy htoprc file
    copy: src=htoprc dest=/{{ var_home }}/{{ var_user }}/.config/htop/htoprc
    become: true
    become_user: "{{ var_user }}"
 
  #
  # Setup vim
  #
  - name: Copy config of vim
    copy: src=vimrc dest=/{{ var_home }}/{{ var_user }}/.vimrc
    become: true
    become_user: "{{ var_user }}"
 
  #
  # Setup readline
  #
  - name: Copy config for readline
    copy: src=inputrc dest=/{{ var_home }}/{{ var_user }}/.inputrc
    become: true
    become_user: "{{ var_user }}"
 
  #
  # Setup bash prompt
  #
  - name: Copy config of bash prompt
    copy: src=bashrc.ps1.sh dest=/{{ var_home }}/{{ var_user }}/.bashrc.ps1.sh
    become: true
    become_user: "{{ var_user }}"
  - name: Load new bash prompt by default
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="source ~/.bashrc.ps1.sh"
    become: true
    become_user: "{{ var_user }}"
  - name: Remove duplicates from history file
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="export HISTCONTROL=erasedups"
    become: true
    become_user: "{{ var_user }}"
  - name: Set reasonable history size
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="export HISTSIZE=10000"
    become: true
    become_user: "{{ var_user }}"
  - name: Allow forward history search with Ctrl+S
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="[[ $- == *i* ]] && stty -ixon"
    become: true
    become_user: "{{ var_user }}"

  #
  # Setup tmux
  #
  - name: Copy config of tmux
    copy: src=tmux.conf dest=/{{ var_home }}/{{ var_user }}/.tmux.conf
    become: true
    become_user: "{{ var_user }}"

  #
  # Powertop rules
  #
  - name: Enable more powersaving
    copy: src=01-powertop.conf dest=/etc/sysctl.d/01-powertop.conf
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Disable wol
    copy: src=81-wol.rules dest=/etc/udev/rules.d/81-wol.rules
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: PCI powermgmt
    copy: src=82-pci.rules dest=/etc/udev/rules.d/82-pci.rules
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')

  #
  # Setup deduplication
  #
  - name: Check if duperemove is installed
    command: rpm -q duperemove
    register: st
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Error if duperemove is missing
    fail: msg="Pls install duperemove pkg first"
    when: ((ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')) and (st is failed)
  - name: Add duperemove@.service
    copy: src='duperemove@.service' dest='/etc/systemd/system/duperemove@.service'
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Add duperemove-weekly@.timer
    copy: src='duperemove-weekly@.timer' dest='/etc/systemd/system/duperemove-weekly@.timer'
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Add duperemove config
    copy: src='duperemove' dest='/etc/default/duperemove'
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Reload systemd
    systemd: daemon_reload=yes
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Check if sysroot exists
    stat: path=/sysroot/
    register: st
  - name: Enable duperemove for sysroot
    systemd: name='duperemove-weekly@-.timer' state=started enabled=yes
    become: true
    become_user: root
    when: ((ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')) and (st.stat.exists == False)
  - name: Enable duperemove for sysroot
    systemd: name='duperemove-weekly@-sysroot-.timer' state=started enabled=yes
    become: true
    become_user: root
    when: ((ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')) and (st.stat.exists == True)
  - name: Enable duperemove for home
    systemd: name='duperemove-weekly@-home-.timer' state=started enabled=yes
    become: true
    become_user: root
    when: ((ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')) and (st.stat.exists == False)
  - name: Enable duperemove for home
    systemd: name='duperemove-weekly@-var-home-.timer' state=started enabled=yes
    become: true
    become_user: root
    when: ((ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')) and (st.stat.exists == True)

