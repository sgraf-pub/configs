---
  - name: run this on fedora type systems
    set_fact:
      var_home: 'home'
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')

  - name: run this on OSX type systems
    set_fact:
      var_home: 'Users'
    when: ansible_distribution == 'MacOSX'

  #
  # Check if var_user is valid
  #
  - name: Check if username is valid
    stat: path=/{{ var_home }}/{{ var_user }}
    register: st
  - name: Error if username is invalid
    fail: msg="Invalid username"
    when: st.stat.exists == False

  #
  # Setup htop
  #
  - name: Create htoprc dir
    file: path=/{{ var_home }}/{{ var_user }}/.config/htop state=directory
    become: true
    become_user: "{{ var_user }}"
  - name: Copy htoprc file
    copy: src=htoprc dest=/{{ var_home }}/{{ var_user }}/.config/htop/htoprc
    become: true
    become_user: "{{ var_user }}"
 
  #
  # Setup vim
  #
  - name: Copy config of vim
    copy: src=vimrc dest=/{{ var_home }}/{{ var_user }}/.vimrc
    become: true
    become_user: "{{ var_user }}"
 
  #
  # Setup readline
  #
  - name: Copy config for readline
    copy: src=inputrc dest=/{{ var_home }}/{{ var_user }}/.inputrc
    become: true
    become_user: "{{ var_user }}"
 
  #
  # Setup bash prompt
  #
  - name: Copy config of bash prompt
    copy: src=bashrc.ps1.sh dest=/{{ var_home }}/{{ var_user }}/.bashrc.ps1.sh
    become: true
    become_user: "{{ var_user }}"
  - name: Load new bash prompt by default
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="source ~/.bashrc.ps1.sh"
    become: true
    become_user: "{{ var_user }}"
  - name: Remove duplicates from history file
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="export HISTCONTROL=erasedups"
    become: true
    become_user: "{{ var_user }}"
  - name: Set reasonable history size
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="export HISTSIZE=10000"
    become: true
    become_user: "{{ var_user }}"
  - name: Allow forward history search with Ctrl+S
    lineinfile: dest="/{{ var_home }}/{{ var_user }}/.bashrc" line="[[ $- == *i* ]] && stty -ixon"
    become: true
    become_user: "{{ var_user }}"

  #
  # Setup tmux
  #
  - name: Copy config of tmux
    copy: src=tmux.conf dest=/{{ var_home }}/{{ var_user }}/.tmux.conf
    become: true
    become_user: "{{ var_user }}"

  #
  # Remove previous powertop rules
  #
  - name: Remove /etc/sysctl.d/01-powertop.conf
    file: path='/etc/sysctl.d/01-powertop.conf' state=absent
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Remove /etc/udev/rules.d/81-wol.rules
    file: path='/etc/udev/rules.d/81-wol.rules' state=absent
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Remove /etc/udev/rules.d/82-pci.rules
    file: path='/etc/udev/rules.d/82-pci.rules' state=absent
    become: true
    become_user: root
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')

  #
  # Update script
  #
  - name: Creates directory
    file:
      path: /{{ var_home }}/{{ var_user }}/.local/bin
      state: directory
    become: true
    become_user: "{{ var_user }}"
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')
  - name: Add update script
    copy: src=up dest=/{{ var_home }}/{{ var_user }}/.local/bin/up mode=0755
    become: true
    become_user: "{{ var_user }}"
    when: (ansible_distribution == 'Fedora') or (ansible_distribution == 'openSUSE Leap')

  #
  # Antivirus
  #
  - name: Install clamav
    dnf:
      name:
        - clamav
        - clamav-update
        - clamav-scanner-systemd
      state: latest
    become: true
    become_user: root
  - name: Add clamav config
    copy: src=scan.conf dest=/etc/clamd.d/scan.conf mode=0644
    become: true
    become_user: root
  - name: Get clamav selinux boolean
    shell: getsebool antivirus_can_scan_system | grep on
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
    become: true
    become_user: root
  - name: Set clamav selinux boolean
    command: setsebool -P antivirus_can_scan_system 1
    when: result is failed
    become: true
    become_user: root
  - name: Start freshclamav
    systemd:
      name: clamd-freshclam.service
      enabled: yes
      state: started
    become: true
    become_user: root
  - name: Start clamd
    systemd:
      name: clamd@scan.service
      enabled: yes
      state: started
    become: true
    become_user: root
  - name: Start clamonacc
    systemd:
      name: clamav-clamonacc.service
      enabled: yes
      state: started
    become: true
    become_user: root
