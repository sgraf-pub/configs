---
  #
  # Set automatic makecache for dnf
  #
  - name: Disable regular dnf makecache
    service: name=dnf-makecache.timer state=stopped enabled=no

  - name: Disable regular yum makecache
    service: name=yum-makecache.timer state=stopped enabled=no
    ignore_errors: True

  #
  # Remove yum caches
  #
  #- name: Remove yum cache
  #  file: path="/var/cache/yum" state=absent
  #- name: Remove yum mock cache
  #  file: path="/var/cache/mock/fedora-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/yum_cache" state=absent

  # Enable TRIM
  - name: Enable weekly FS TRIM
    service: name=fstrim.timer state=started enabled=yes
  - name: Fix /etc/crypttab
    replace: dest=/etc/crypttab regexp='^(.*)none $' replace='\1none discard' backup=yes
  - name: Check if /etc/crypttab is in initrd
    shell: lsinitrd /boot/initramfs-$(uname -r).img etc/crypttab
    register: result
    changed_when: False
  - name: Fix initramfs
    shell: dracut --force -I /etc/crypttab
    when: result.stdout == ""

  #
  # Set swappiness to reasonable value
  #
  #- name: Set swappiness to some default value
  #  sysctl: name=vm.swappiness value=60 state=present

  #
  # Install necessary packages
  #
  #- name: Check rpmfusion-free
  #  shell: "rpm -q rpmfusion-free-release-{{ ansible_distribution_major_version }}"
  #  register: result
  #  ignore_errors: True
  #  changed_when: "result.rc != 0"
  #- name: Install rpmfusion-free
  #  dnf: name="http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm" state=present
  #  when: result|failed
  #- name: Update to the latest
  #  dnf: name='*' state=latest
  - name: Install packages
    dnf: name={{ item }} state=present
    with_items:
    - ansible-lint
    - bash-completion
    - curl
    - dconf-editor
    - dnf-plugin-system-upgrade
    - "f{{ ansible_distribution_major_version }}-backgrounds-extras-gnome"
    - firefox
    - freemind
    - fuse-sshfs
    - gedit-plugins
    - ghostscript
    - gimp
    - git
    - gnome-tweak-tool
    - hdparm
    - htop
    - keepassx
    - krb5-auth-dialog
    - krb5-workstation
    - lftp
    - linphone
    - lm_sensors
    - lshw
    - mc
    - meld
    - mmv
    - mock
    - nano
    - poppler
    - powertop
    - psutils
    - python-tools
    - rfkill
    - rpmconf
    - screen
    - sdparm
    - simple-scan
    - smartmontools
    - sysfsutils
    - tmux
    - vim-enhanced
    - wget
    - youtube-dl

  #
  # Install MS fonts
  #
  #- name: Check msttcore-fonts
  #  shell: rpm -q msttcore-fonts-installer
  #  register: result
  #  ignore_errors: True
  #  changed_when: "result.rc != 0"
  #- name: Install msttcore-fonts
  #  dnf: name=https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm state=present
  #  when: result|failed

  #
  # Install languages
  #
  - name: Install Czech
    dnf: name=langpacks-cs state=present

  - name: Install English
    dnf: name=langpacks-en state=present

  #
  # Check if var_user is valid
  #
  - name: Check if username is valid
    shell: ls -d /home/{{ var_user }}
    changed_when: "result.rc != 0"

  #
  # Fix groups membership
  #
  - name: Add user to mock group
    user: name={{ var_user}} append=yes groups=mock
  - name: Add user to lp group
    user: name={{ var_user}} append=yes groups=lp

  #
  # Mock should use dnf
  #
  #- name: Switch mock from yum to dnf
  #  lineinfile: dest=/etc/mock/site-defaults.cfg regexp="^config_opts..package_manager" insertafter="^# config_opts..package_manager" line="config_opts['package_manager'] = 'dnf'"

  #
  # Setup htop
  #
  - name: Check htoprc
    shell: ls -d /home/{{ var_user }}/.config/htop/
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Create htoprc dir
    file: path=/home/{{ var_user }}/.config/htop state=directory mode=755 owner={{ var_user }} group={{ var_user }}
    when: result|failed
  - name: Copy htoprc file
    copy: src=htoprc dest=/home/{{ var_user }}/.config/htop/htoprc mode=600 owner={{ var_user }} group={{ var_user }}

  #
  # Setup ssh
  #
  #- name: Create directory for config of ssh
  #  file: dest={{ item }}/.ssh state=directory mode=700
  #  with_items: [/root, "/home/{{ var_user }}"]
  #- name: Copy config of ssh
  #  copy: src=ssh.config dest={{ item }}/.ssh/config mode=644
  #  with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup vim
  #
  - name: Copy config of vim
    copy: src=vimrc dest={{ item }}/.vimrc mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup readline
  #
  - name: Copy config for readline
    copy: src=inputrc dest={{ item }}/.inputrc mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup bash prompt
  #
  - name: Copy config of bash prompt
    copy: src=bashrc.ps1.sh dest={{ item }}/.bashrc.ps1.sh mode=755
    with_items: [/root, "/home/{{ var_user }}"]
  - name: Load new bash prompt by default
    lineinfile: dest="{{ item }}/.bashrc" line="source ~/.bashrc.ps1.sh"
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup screen
  #
  - name: Copy config of screen
    copy: src=screenrc dest={{ item }}/.screenrc mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup firefox profiles entry
  #
  #- name: Setup firefox profiles entry
  #  copy: src=firefox-profiles.desktop dest=/usr/local/share/applications/firefox-profiles.desktop mode=644

  #
  # Setup dnsmasq
  #
  - name: Enable dnsmasq
    ini_file: dest=/etc/NetworkManager/NetworkManager.conf section=main option=dns value=dnsmasq
  - name: Fix default dnsmasq config
    copy: src=dnsmasq.params.conf dest=/etc/NetworkManager/dnsmasq.d/dnsmasq.params.conf

  #
  # Setup journald
  #
  - name: Limit max size of journald logs
    ini_file: dest=/etc/systemd/journald.conf section=Journal option=SystemMaxUse value=500M

  #
  # Fix mc file highliting
  #
  - name: Create directory for default skin
    file: path=/home/{{ var_user }}/.local/share/mc/skins state=directory mode=755 owner={{ var_user }} group={{ var_user }}
  - name: Copy default skin
    copy: src=/usr/share/mc/skins/default.ini dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini"
  - name: Disable temp highlight
    lineinfile: dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini" regexp="^    temp =" line="    temp ="
  - name: Disable archive highlight
    lineinfile: dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini" regexp="^    archive =" line="    archive ="
  - name: Disable doc highlight
    lineinfile: dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini" regexp="^    doc =" line="    doc ="
  - name: Disable source highlight
    lineinfile: dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini" regexp="^    source =" line="    source ="
  - name: Disable media highlight
    lineinfile: dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini" regexp="^    media =" line="    media ="
  - name: Disable graph highlight
    lineinfile: dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini" regexp="^    graph =" line="    graph ="
  - name: Disable database highlight
    lineinfile: dest="/home/{{ var_user }}/.local/share/mc/skins/default.ini" regexp="^    database =" line="    database ="

  #
  # Install systemd-zram-service
  #
  - name: Download systemd-zram-service
    shell: lftp -c 'open http://download.opensuse.org/repositories/home:/malcolmlewis:/openSUSE_General/openSUSE_Tumbleweed/noarch/; mget -c systemd-zram-service*.rpm'
    args:
      chdir: /tmp/
  - name: Install systemd-zram-service
    shell: "dnf install -y /tmp/systemd-zram-service*.rpm"
  - name: Enable systemd-zram-service
    service: name=zramswap state=started enabled=yes

  - name: Enable FlatHub
    shell: "flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo"

  #- name: 4.12.x kernel causing touchpad issues on Thinkpad
  #  copy: src=90-psmouse.rules dest=/etc/udev/rules.d/90-psmouse.rules mode=755
  - name: Undo touchpad workaround
    file: state=absent path=/etc/udev/rules.d/90-psmouse.rules

